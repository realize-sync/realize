---
description: Working with capnp protos
globs: *.rs
alwaysApply: false
---

# Capnp Protocol Buffer Best Practices

This rule documents best practices for working with capnp protocol buffers in Rust projects.

## Rule Details

- **Pattern**: `*.rs`
- **Severity**: Warning
- **Category**: Protocol Buffers

## Key Concepts

### 1. Generated Code 

Capnp generates Rust code with the following structure:
- **Reader types**: For reading data from capnp messages
- **Builder types**: For constructing capnp messages
- **Which enums**: For handling union types
- **Owned types**: Type aliases for owned versions

The code is generated automatically from .capnp files by cargo commands such as "cargo check", "cargo test" or "cargo build"; this is controlled by a build.rs file.

### 2. Message Lifecycle

```rust
// 1. Create a message builder
let mut message = capnp::message::Builder::new_default();

// 2. Initialize the root struct
let mut builder = message.init_root::<my_struct::Builder>();

// 3. Fill the builder with data
fill_data(builder.reborrow());

// 4. Convert to reader for reading
let msg_reader = message.into_reader();
let reader = msg_reader.get_root::<my_struct::Reader>().unwrap();

// 5. Parse the data
let parsed = parse_data(reader)?;
```

### 3. Union Type Handling

Capnp unions are handled using the `which()` method:

```rust
match reader.which()? {
    my_struct::Which::Variant1(variant_reader) => {
        // Handle variant1
        let data = variant_reader?.get_field()?;
        Ok(MyEnum::Variant1(data))
    }
    my_struct::Which::Variant2(variant_reader) => {
        // Handle variant2
        let data = variant_reader?.get_field()?;
        Ok(MyEnum::Variant2(data))
    }
}
```

### 4. List Handling

#### Creating Lists
```rust
// Create a list with a specific size
let mut list = results.get().init_res(items.len() as u32);

// Fill the list with items
for (i, item) in items.iter().enumerate() {
    fill_item(item, list.reborrow().get(i as u32));
}
```

#### Reading Lists
```rust
// Read a list from a reader
let list_reader = reader.get_list()?;
for item_reader in list_reader.iter() {
    let item = parse_item(item_reader?)?;
    items.push(item);
}
```

### 5. RPC Server Implementation

#### Async RPC Methods
```rust
fn my_method(
    &mut self,
    _: MyParams,
    mut results: MyResults,
) -> Promise<(), capnp::Error> {
    let storage = Arc::clone(&self.storage);
    Promise::from_future(async move {
        // Async work here
        let data = storage.get_data().await?;

        // Fill results
        let mut res = results.get().init_res();
        res.set_field(data);

        Ok(())
    })
}
```

#### List Return Types
```rust
// For return type: (res: List(ItemType))
fn recent_items(
    &mut self,
    _: RecentItemsParams,
    mut results: RecentItemsResults,
) -> Promise<(), capnp::Error> {
    let items = self.get_items().await;

    // Create list with correct size
    let mut item_list = results.get().init_res(items.len() as u32);

    // Fill each item
    for (i, item) in items.iter().enumerate() {
        convert::fill_item(item, item_list.reborrow().get(i as u32));
    }

    Promise::ok(())
}
```

### 6. Builder Ownership and Reborrow

#### Avoiding Ownership Issues
```rust
// Bad: Builder consumed by init_job()
let mut job_builder = dest.init_job();
job_builder.set_path(path);
dest.set_progress(progress); // Error: dest moved

// Good: Use reborrow() to avoid ownership issues
let mut job_builder = dest.reborrow().init_job();
job_builder.set_path(path);
dest.set_progress(progress); // Works: dest still available
```

#### Complex Nested Structures
```rust
pub fn fill_complex_struct(
    source: &ComplexStruct,
    mut dest: complex_struct::Builder<'_>,
) {
    // Set simple fields
    dest.set_id(source.id);

    // Handle nested structures with reborrow()
    let mut nested = dest.reborrow().init_nested();
    nested.set_field(source.nested_field);

    // Handle lists
    let mut list = dest.reborrow().init_list(source.items.len() as u32);
    for (i, item) in source.items.iter().enumerate() {
        fill_item(item, list.reborrow().get(i as u32));
    }

    // Handle unions
    match &source.variant {
        Variant::A => dest.reborrow().init_variant_a(),
        Variant::B(data) => {
            let mut builder = dest.reborrow().init_variant_b();
            builder.set_data(data);
        }
    }
}
```

### 7. Error Handling Patterns

#### Result Unwrapping
```rust
// Good: Bind Result to variable before using
let variant_reader = variant_reader_result?;
let data = variant_reader.get_field()?;

// Bad: Chaining ? operators on temporary values
let data = variant_reader?.get_field()?; // May cause move issues
```

#### Boolean Methods
```rust
// Good: Boolean methods return bool, not Result
if reader.has_field() {
    let data = reader.get_field()?;
    // Use data
}

// Bad: Using ? on boolean methods
if reader.has_field()? { // Error: bool doesn't implement Try
```

### 8. Type Conversions

#### String Handling
```rust
// Convert capnp text to Rust string
let rust_string = reader.get_text()?.to_str()?.to_string();

// Convert Rust string to capnp text
builder.set_text(&rust_string);
```

#### Array/Data Handling
```rust
// Convert capnp data to Rust array
let data = reader.get_data()?;
let array: [u8; 32] = data.try_into()
    .map_err(|_| capnp::Error::failed("invalid array length"))?;

// Convert Rust array to capnp data
builder.set_data(&array);
```

### 9. Builder vs Reader Pattern

```rust
// Writing (Builder pattern)
pub fn fill_notification(
    source: MyStruct,
    mut dest: notification::Builder<'_>,
) {
    dest.set_field(&source.field);
    match &source.variant {
        Variant::A => dest.reborrow().init_variant_a(),
        Variant::B(data) => {
            let mut builder = dest.reborrow().init_variant_b();
            builder.set_data(data);
        }
    }
}

// Reading (Reader pattern)
pub fn parse_notification(
    reader: notification::Reader<'_>,
) -> Result<MyStruct, capnp::Error> {
    let field = reader.get_field()?.to_str()?;
    let variant = match reader.which()? {
        notification::Which::VariantA(_) => Variant::A,
        notification::Which::VariantB(variant_reader) => {
            let data = variant_reader?.get_data()?;
            Variant::B(data.to_vec())
        }
    };
    Ok(MyStruct { field, variant })
}
```

### 10. Round-trip Testing

```rust
#[test]
fn test_round_trip() {
    let original = create_test_data();

    // Convert to capnp
    let mut message = capnp::message::Builder::new_default();
    let mut builder = message.init_root::<my_struct::Builder>();
    fill_data(original.clone(), builder.reborrow());

    // Convert back to rust
    let msg_reader = message.into_reader();
    let reader = msg_reader.get_root::<my_struct::Reader>().unwrap();
    let parsed = parse_data(reader).unwrap();

    // Compare
    assert_eq!(original, parsed);
}
```

### 11. RPC Integration Testing

```rust
#[tokio::test]
async fn test_rpc_method() -> anyhow::Result<()> {
    let fixture = setup_fixture().await?;
    let client = connect_client(&fixture).await?;

    // Call RPC method
    let result = client.my_method_request().send().promise.await?;
    let response = result.get()?.get_res()?;

    // Verify response
    assert_eq!(response.get_field()?, expected_value);

    Ok(())
}
```

## Common Pitfalls

### 1. Temporary Value Drops
```rust
// Bad: Temporary value dropped while borrowed
let reader = message.into_reader().get_root::<MyStruct::Reader>().unwrap();

// Good: Bind to variable first
let msg_reader = message.into_reader();
let reader = msg_reader.get_root::<MyStruct::Reader>().unwrap();
```

### 2. Union Result Handling
```rust
// Bad: Using ? on union variant readers directly
match reader.which()? {
    MyStruct::Which::Variant(variant_reader) => {
        let data = variant_reader?.get_field()?; // variant_reader is Result
    }
}

// Good: Unwrap the Result first
match reader.which()? {
    MyStruct::Which::Variant(variant_reader_result) => {
        let variant_reader = variant_reader_result?;
        let data = variant_reader.get_field()?;
    }
}
```

### 3. Boolean Method Usage
```rust
// Bad: Using ? on boolean methods
if reader.has_field()? { // Error: bool doesn't implement Try

// Good: Boolean methods return bool
if reader.has_field() {
    let field = reader.get_field()?;
}
```

### 4. Builder vs Reader Confusion
```rust
// Bad: Trying to read from a Builder
let reader = message.get_root::<MyStruct::Reader>().unwrap(); // Wrong trait

// Good: Convert Builder to Reader first
let msg_reader = message.into_reader();
let reader = msg_reader.get_root::<MyStruct::Reader>().unwrap();
```

### 5. List Size Mismatch
```rust
// Bad: Creating list with wrong size
let mut list = results.get().init_res(10); // Fixed size
for (i, item) in items.iter().enumerate() {
    if i >= 10 { break; } // Items lost
    fill_item(item, list.reborrow().get(i as u32));
}

// Good: Use actual size
let mut list = results.get().init_res(items.len() as u32);
for (i, item) in items.iter().enumerate() {
    fill_item(item, list.reborrow().get(i as u32));
}
```

### 6. Forgetting Reborrow in Nested Structures
```rust
// Bad: Builder consumed by nested init
let mut nested = dest.init_nested();
nested.set_field(value);
dest.set_other_field(other_value); // Error: dest moved

// Good: Use reborrow for nested structures
let mut nested = dest.reborrow().init_nested();
nested.set_field(value);
dest.set_other_field(other_value); // Works
```

## Best Practices

1. **Always bind Result values to variables** before using them multiple times
2. **Use `into_reader()`** to convert Builder to Reader for reading
3. **Handle union variants carefully** - they return `Result<Reader, Error>`
4. **Boolean methods return bool**, not Result
5. **Write comprehensive round-trip tests** for all data structures
6. **Use meaningful error messages** when converting between types
7. **Document the relationship** between capnp and Rust types
8. **Use `reborrow()`** when building nested structures to avoid ownership issues
9. **Create lists with correct size** using `init_res(actual_size)`
10. **Handle async RPC methods** with `Promise::from_future`
11. **Test RPC methods** with integration tests that verify the full client-server flow

## References

- [Capnp Rust Documentation](https://docs.rs/capnp)
- [Capnp Schema Language](https://capnproto.org/language.html)
- [Capnp Rust Examples](https://github.com/capnproto/capnproto-rust)

## Examples

### Complete Example: RPC Server with Lists

```rust
// Capnp schema (control.capnp)
interface Churten {
    recentJobs @4 () -> (res: List(JobInfo));
}

struct JobInfo {
    arena @0: Text;
    id @1: UInt64;
    job @2: Job;
    progress @3: JobProgress;
    action @4: JobAction;
    byteProgress @5: ByteProgress;
}

// Rust RPC server implementation
impl<H: JobHandler + 'static> churten::Server for ChurtenServer<H> {
    fn recent_jobs(
        &mut self,
        _: RecentJobsParams,
        mut results: RecentJobsResults,
    ) -> Promise<(), capnp::Error> {
        let churten = self.churten.clone();
        Promise::from_future(async move {
            let recent_jobs = churten.borrow().recent_jobs().await;

            // Create list with correct size
            let mut job_list = results.get().init_res(recent_jobs.len() as u32);

            // Fill each job info
            for (i, job_info) in recent_jobs.iter().enumerate() {
                convert::fill_job_info(job_info, job_list.reborrow().get(i as u32));
            }

            Ok(())
        })
    }
}

// Conversion function
pub fn fill_job_info(
    source: &JobInfo,
    mut dest: control_capnp::job_info::Builder<'_>,
) {
    dest.set_arena(&source.arena.as_str());
    dest.set_id(source.id.as_u64());

    // Handle nested job structure with reborrow()
    let mut job_builder = dest.reborrow().init_job();
    job_builder.set_path(source.job.path().as_str());
    job_builder.set_hash(&source.job.hash().0);

    match &*source.job {
        realize_storage::Job::Download(_, _) => {
            job_builder.init_download();
        }
        realize_storage::Job::Realize(_, _, index_hash) => {
            let mut realize = job_builder.init_realize();
            if let Some(h) = index_hash {
                realize.set_index_hash(&h.0);
            }
        }
        realize_storage::Job::Unrealize(_, _) => {
            job_builder.init_unrealize();
        }
    }

    // Handle progress enum
    match &source.progress {
        JobProgress::Pending => {
            dest.set_progress(control_capnp::JobProgress::Pending);
        }
        JobProgress::Running => {
            dest.set_progress(control_capnp::JobProgress::Running);
        }
        JobProgress::Done => {
            dest.set_progress(control_capnp::JobProgress::Done);
        }
        JobProgress::Abandoned => {
            dest.set_progress(control_capnp::JobProgress::Abandoned);
        }
        JobProgress::Cancelled => {
            dest.set_progress(control_capnp::JobProgress::Cancelled);
        }
        JobProgress::Failed(_msg) => {
            dest.set_progress(control_capnp::JobProgress::Failed);
        }
    }

    // Handle optional action
    match &source.action {
        Some(JobAction::Download) => dest.set_action(control_capnp::JobAction::Download),
        Some(JobAction::Verify) => dest.set_action(control_capnp::JobAction::Verify),
        Some(JobAction::Repair) => dest.set_action(control_capnp::JobAction::Repair),
        Some(JobAction::Move) => dest.set_action(control_capnp::JobAction::Move),
        None => dest.set_action(control_capnp::JobAction::None),
    }

    // Handle optional byte progress
    if let Some((current, total)) = source.byte_progress {
        let mut byte_progress = dest.init_byte_progress();
        byte_progress.set_current(current);
        byte_progress.set_total(total);
    }
}

// Integration test
#[tokio::test]
async fn test_recent_jobs() -> anyhow::Result<()> {
    let fixture = setup_fixture().await?;
    let client = connect_client(&fixture).await?;

    // Create some jobs
    create_test_jobs(&fixture).await?;

    // Call RPC method
    let result = client.recent_jobs_request().send().promise.await?;
    let jobs = result.get()?.get_res()?;

    // Verify response
    assert!(jobs.len() > 0);
    let job = jobs.get(0);
    assert_eq!(job.get_arena()?, "test-arena");
    assert_eq!(job.get_id(), 1);

    Ok(())
}
```

This rule ensures proper handling of capnp protocol buffers in Rust projects, preventing common pitfalls and maintaining type safety.
